/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Sahib Game Store
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AddOrUpdateCompanyDTO,
  AddOrUpdateGameDTO,
  AddOrUpdateGameOverviewDTO,
  AddOrUpdateGenreDTO,
  AddOrUpdatePlatformDTO,
  AddOrUpdateReviewDTO,
  AddorUpdateCartItemDto,
  AddorUpdatePaymentMethodDto,
  ChangePasswordDto,
  CompanyViewModel,
  CreateOrderDto,
  GameListViewModel,
  GameViewModel,
  GenreViewModel,
  GetApiAccountPasswordResetCheckTokenParams,
  GetApiGamesParams,
  GetApiOrdersMyParams,
  GetApiOrdersParams,
  LoginDto,
  NewPasswordDto,
  PlatformViewModel,
  PutApiGamesIdUploadthumbimageBody,
  RefreshDto,
  RegisterDto,
  ResetPasswordDto,
  ReviewListViewModel,
  UpdateOrderDto,
} from "../../types/api.ts";

import { axiosInstance } from "../axiosInstance";

export const postApiAccountLogin = (
  loginDto: LoginDto,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Account/Login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginDto,
    signal,
  });
};

export const getPostApiAccountLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationKey = ["postApiAccountLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountLogin>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAccountLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountLogin>>
>;
export type PostApiAccountLoginMutationBody = LoginDto;
export type PostApiAccountLoginMutationError = unknown;

export const usePostApiAccountLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAccountLogin>>,
      TError,
      { data: LoginDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationOptions = getPostApiAccountLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const postApiAccountRegister = (
  registerDto: RegisterDto,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Account/Register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerDto,
    signal,
  });
};

export const getPostApiAccountRegisterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountRegister>>,
    TError,
    { data: RegisterDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountRegister>>,
  TError,
  { data: RegisterDto },
  TContext
> => {
  const mutationKey = ["postApiAccountRegister"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountRegister>>,
    { data: RegisterDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAccountRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountRegister>>
>;
export type PostApiAccountRegisterMutationBody = RegisterDto;
export type PostApiAccountRegisterMutationError = unknown;

export const usePostApiAccountRegister = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAccountRegister>>,
      TError,
      { data: RegisterDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountRegister>>,
  TError,
  { data: RegisterDto },
  TContext
> => {
  const mutationOptions = getPostApiAccountRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const putApiAccountChangePassword = (
  changePasswordDto: ChangePasswordDto,
) => {
  return axiosInstance<void>({
    url: `/api/Account/ChangePassword`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: changePasswordDto,
  });
};

export const getPutApiAccountChangePasswordMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiAccountChangePassword>>,
    TError,
    { data: ChangePasswordDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiAccountChangePassword>>,
  TError,
  { data: ChangePasswordDto },
  TContext
> => {
  const mutationKey = ["putApiAccountChangePassword"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiAccountChangePassword>>,
    { data: ChangePasswordDto }
  > = (props) => {
    const { data } = props ?? {};

    return putApiAccountChangePassword(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiAccountChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiAccountChangePassword>>
>;
export type PutApiAccountChangePasswordMutationBody = ChangePasswordDto;
export type PutApiAccountChangePasswordMutationError = unknown;

export const usePutApiAccountChangePassword = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiAccountChangePassword>>,
      TError,
      { data: ChangePasswordDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiAccountChangePassword>>,
  TError,
  { data: ChangePasswordDto },
  TContext
> => {
  const mutationOptions =
    getPutApiAccountChangePasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiAccountUserClaims = (signal?: AbortSignal) => {
  return axiosInstance<void>({
    url: `/api/Account/UserClaims`,
    method: "GET",
    signal,
  });
};

export const getGetApiAccountUserClaimsQueryKey = () => {
  return [`/api/Account/UserClaims`] as const;
};

export const getGetApiAccountUserClaimsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountUserClaims>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiAccountUserClaims>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiAccountUserClaimsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAccountUserClaims>>
  > = ({ signal }) => getApiAccountUserClaims(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountUserClaims>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAccountUserClaimsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountUserClaims>>
>;
export type GetApiAccountUserClaimsQueryError = unknown;

export function useGetApiAccountUserClaims<
  TData = Awaited<ReturnType<typeof getApiAccountUserClaims>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountUserClaims>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountUserClaims>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountUserClaims>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAccountUserClaims<
  TData = Awaited<ReturnType<typeof getApiAccountUserClaims>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountUserClaims>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountUserClaims>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountUserClaims>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAccountUserClaims<
  TData = Awaited<ReturnType<typeof getApiAccountUserClaims>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountUserClaims>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiAccountUserClaims<
  TData = Awaited<ReturnType<typeof getApiAccountUserClaims>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountUserClaims>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiAccountUserClaimsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiAccountRefresh = (
  refreshDto: RefreshDto,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Account/Refresh`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: refreshDto,
    signal,
  });
};

export const getPostApiAccountRefreshMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountRefresh>>,
    TError,
    { data: RefreshDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountRefresh>>,
  TError,
  { data: RefreshDto },
  TContext
> => {
  const mutationKey = ["postApiAccountRefresh"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountRefresh>>,
    { data: RefreshDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAccountRefresh(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountRefresh>>
>;
export type PostApiAccountRefreshMutationBody = RefreshDto;
export type PostApiAccountRefreshMutationError = unknown;

export const usePostApiAccountRefresh = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAccountRefresh>>,
      TError,
      { data: RefreshDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountRefresh>>,
  TError,
  { data: RefreshDto },
  TContext
> => {
  const mutationOptions = getPostApiAccountRefreshMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const postApiAccountLogout = (signal?: AbortSignal) => {
  return axiosInstance<void>({
    url: `/api/Account/Logout`,
    method: "POST",
    signal,
  });
};

export const getPostApiAccountLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountLogout>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postApiAccountLogout"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountLogout>>,
    void
  > = () => {
    return postApiAccountLogout();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountLogout>>
>;

export type PostApiAccountLogoutMutationError = unknown;

export const usePostApiAccountLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAccountLogout>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiAccountLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const postApiAccountPasswordResetSend = (
  resetPasswordDto: ResetPasswordDto,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Account/PasswordReset/send`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: resetPasswordDto,
    signal,
  });
};

export const getPostApiAccountPasswordResetSendMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountPasswordResetSend>>,
    TError,
    { data: ResetPasswordDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountPasswordResetSend>>,
  TError,
  { data: ResetPasswordDto },
  TContext
> => {
  const mutationKey = ["postApiAccountPasswordResetSend"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountPasswordResetSend>>,
    { data: ResetPasswordDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAccountPasswordResetSend(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountPasswordResetSendMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountPasswordResetSend>>
>;
export type PostApiAccountPasswordResetSendMutationBody = ResetPasswordDto;
export type PostApiAccountPasswordResetSendMutationError = unknown;

export const usePostApiAccountPasswordResetSend = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAccountPasswordResetSend>>,
      TError,
      { data: ResetPasswordDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountPasswordResetSend>>,
  TError,
  { data: ResetPasswordDto },
  TContext
> => {
  const mutationOptions =
    getPostApiAccountPasswordResetSendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiAccountPasswordResetCheckToken = (
  params?: GetApiAccountPasswordResetCheckTokenParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Account/PasswordReset/check_token`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiAccountPasswordResetCheckTokenQueryKey = (
  params?: GetApiAccountPasswordResetCheckTokenParams,
) => {
  return [
    `/api/Account/PasswordReset/check_token`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiAccountPasswordResetCheckTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
  TError = unknown,
>(
  params?: GetApiAccountPasswordResetCheckTokenParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiAccountPasswordResetCheckTokenQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>
  > = ({ signal }) => getApiAccountPasswordResetCheckToken(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAccountPasswordResetCheckTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>
>;
export type GetApiAccountPasswordResetCheckTokenQueryError = unknown;

export function useGetApiAccountPasswordResetCheckToken<
  TData = Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
  TError = unknown,
>(
  params: undefined | GetApiAccountPasswordResetCheckTokenParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAccountPasswordResetCheckToken<
  TData = Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
  TError = unknown,
>(
  params?: GetApiAccountPasswordResetCheckTokenParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAccountPasswordResetCheckToken<
  TData = Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
  TError = unknown,
>(
  params?: GetApiAccountPasswordResetCheckTokenParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiAccountPasswordResetCheckToken<
  TData = Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
  TError = unknown,
>(
  params?: GetApiAccountPasswordResetCheckTokenParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPasswordResetCheckToken>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiAccountPasswordResetCheckTokenQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiAccountPasswordResetReset = (
  newPasswordDto: NewPasswordDto,
) => {
  return axiosInstance<void>({
    url: `/api/Account/PasswordReset/reset`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: newPasswordDto,
  });
};

export const getPutApiAccountPasswordResetResetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiAccountPasswordResetReset>>,
    TError,
    { data: NewPasswordDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiAccountPasswordResetReset>>,
  TError,
  { data: NewPasswordDto },
  TContext
> => {
  const mutationKey = ["putApiAccountPasswordResetReset"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiAccountPasswordResetReset>>,
    { data: NewPasswordDto }
  > = (props) => {
    const { data } = props ?? {};

    return putApiAccountPasswordResetReset(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiAccountPasswordResetResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiAccountPasswordResetReset>>
>;
export type PutApiAccountPasswordResetResetMutationBody = NewPasswordDto;
export type PutApiAccountPasswordResetResetMutationError = unknown;

export const usePutApiAccountPasswordResetReset = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiAccountPasswordResetReset>>,
      TError,
      { data: NewPasswordDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiAccountPasswordResetReset>>,
  TError,
  { data: NewPasswordDto },
  TContext
> => {
  const mutationOptions =
    getPutApiAccountPasswordResetResetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiAccountPaymentMethods = (signal?: AbortSignal) => {
  return axiosInstance<void>({
    url: `/api/Account/PaymentMethods`,
    method: "GET",
    signal,
  });
};

export const getGetApiAccountPaymentMethodsQueryKey = () => {
  return [`/api/Account/PaymentMethods`] as const;
};

export const getGetApiAccountPaymentMethodsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiAccountPaymentMethodsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAccountPaymentMethods>>
  > = ({ signal }) => getApiAccountPaymentMethods(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAccountPaymentMethodsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountPaymentMethods>>
>;
export type GetApiAccountPaymentMethodsQueryError = unknown;

export function useGetApiAccountPaymentMethods<
  TData = Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountPaymentMethods>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAccountPaymentMethods<
  TData = Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountPaymentMethods>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAccountPaymentMethods<
  TData = Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiAccountPaymentMethods<
  TData = Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPaymentMethods>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiAccountPaymentMethodsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiAccountPaymentMethodId = (
  id: string,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Account/PaymentMethod/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiAccountPaymentMethodIdQueryKey = (id: string) => {
  return [`/api/Account/PaymentMethod/${id}`] as const;
};

export const getGetApiAccountPaymentMethodIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiAccountPaymentMethodIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>
  > = ({ signal }) => getApiAccountPaymentMethodId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAccountPaymentMethodIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>
>;
export type GetApiAccountPaymentMethodIdQueryError = unknown;

export function useGetApiAccountPaymentMethodId<
  TData = Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAccountPaymentMethodId<
  TData = Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
          TError,
          Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAccountPaymentMethodId<
  TData = Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiAccountPaymentMethodId<
  TData = Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAccountPaymentMethodId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiAccountPaymentMethodIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiAccountPaymentMethodId = (
  id: string,
  addorUpdatePaymentMethodDto: AddorUpdatePaymentMethodDto,
) => {
  return axiosInstance<void>({
    url: `/api/Account/PaymentMethod/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: addorUpdatePaymentMethodDto,
  });
};

export const getPutApiAccountPaymentMethodIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiAccountPaymentMethodId>>,
    TError,
    { id: string; data: AddorUpdatePaymentMethodDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiAccountPaymentMethodId>>,
  TError,
  { id: string; data: AddorUpdatePaymentMethodDto },
  TContext
> => {
  const mutationKey = ["putApiAccountPaymentMethodId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiAccountPaymentMethodId>>,
    { id: string; data: AddorUpdatePaymentMethodDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiAccountPaymentMethodId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiAccountPaymentMethodIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiAccountPaymentMethodId>>
>;
export type PutApiAccountPaymentMethodIdMutationBody =
  AddorUpdatePaymentMethodDto;
export type PutApiAccountPaymentMethodIdMutationError = unknown;

export const usePutApiAccountPaymentMethodId = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiAccountPaymentMethodId>>,
      TError,
      { id: string; data: AddorUpdatePaymentMethodDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiAccountPaymentMethodId>>,
  TError,
  { id: string; data: AddorUpdatePaymentMethodDto },
  TContext
> => {
  const mutationOptions =
    getPutApiAccountPaymentMethodIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const postApiAccountPaymentMethod = (
  addorUpdatePaymentMethodDto: AddorUpdatePaymentMethodDto,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Account/PaymentMethod`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addorUpdatePaymentMethodDto,
    signal,
  });
};

export const getPostApiAccountPaymentMethodMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountPaymentMethod>>,
    TError,
    { data: AddorUpdatePaymentMethodDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountPaymentMethod>>,
  TError,
  { data: AddorUpdatePaymentMethodDto },
  TContext
> => {
  const mutationKey = ["postApiAccountPaymentMethod"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountPaymentMethod>>,
    { data: AddorUpdatePaymentMethodDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAccountPaymentMethod(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountPaymentMethodMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountPaymentMethod>>
>;
export type PostApiAccountPaymentMethodMutationBody =
  AddorUpdatePaymentMethodDto;
export type PostApiAccountPaymentMethodMutationError = unknown;

export const usePostApiAccountPaymentMethod = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAccountPaymentMethod>>,
      TError,
      { data: AddorUpdatePaymentMethodDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountPaymentMethod>>,
  TError,
  { data: AddorUpdatePaymentMethodDto },
  TContext
> => {
  const mutationOptions =
    getPostApiAccountPaymentMethodMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteApiAccountPaymentMethodDeleteId = (id: string) => {
  return axiosInstance<void>({
    url: `/api/Account/PaymentMethodDelete/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiAccountPaymentMethodDeleteIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiAccountPaymentMethodDeleteId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiAccountPaymentMethodDeleteId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteApiAccountPaymentMethodDeleteId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiAccountPaymentMethodDeleteId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiAccountPaymentMethodDeleteId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiAccountPaymentMethodDeleteIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiAccountPaymentMethodDeleteId>>
>;

export type DeleteApiAccountPaymentMethodDeleteIdMutationError = unknown;

export const useDeleteApiAccountPaymentMethodDeleteId = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiAccountPaymentMethodDeleteId>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiAccountPaymentMethodDeleteId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getDeleteApiAccountPaymentMethodDeleteIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiCart = (signal?: AbortSignal) => {
  return axiosInstance<void>({ url: `/api/Cart`, method: "GET", signal });
};

export const getGetApiCartQueryKey = () => {
  return [`/api/Cart`] as const;
};

export const getGetApiCartQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCart>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCartQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCart>>> = ({
    signal,
  }) => getApiCart(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCart>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiCartQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCart>>
>;
export type GetApiCartQueryError = unknown;

export function useGetApiCart<
  TData = Awaited<ReturnType<typeof getApiCart>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCart>>,
          TError,
          Awaited<ReturnType<typeof getApiCart>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiCart<
  TData = Awaited<ReturnType<typeof getApiCart>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCart>>,
          TError,
          Awaited<ReturnType<typeof getApiCart>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiCart<
  TData = Awaited<ReturnType<typeof getApiCart>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiCart<
  TData = Awaited<ReturnType<typeof getApiCart>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiCartQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiCartAdd = (
  addorUpdateCartItemDto: AddorUpdateCartItemDto,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Cart/add`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addorUpdateCartItemDto,
    signal,
  });
};

export const getPostApiCartAddMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCartAdd>>,
    TError,
    { data: AddorUpdateCartItemDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCartAdd>>,
  TError,
  { data: AddorUpdateCartItemDto },
  TContext
> => {
  const mutationKey = ["postApiCartAdd"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCartAdd>>,
    { data: AddorUpdateCartItemDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiCartAdd(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCartAddMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCartAdd>>
>;
export type PostApiCartAddMutationBody = AddorUpdateCartItemDto;
export type PostApiCartAddMutationError = unknown;

export const usePostApiCartAdd = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiCartAdd>>,
      TError,
      { data: AddorUpdateCartItemDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiCartAdd>>,
  TError,
  { data: AddorUpdateCartItemDto },
  TContext
> => {
  const mutationOptions = getPostApiCartAddMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const putApiCartUpdate = (
  addorUpdateCartItemDto: AddorUpdateCartItemDto,
) => {
  return axiosInstance<void>({
    url: `/api/Cart/update`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: addorUpdateCartItemDto,
  });
};

export const getPutApiCartUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCartUpdate>>,
    TError,
    { data: AddorUpdateCartItemDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiCartUpdate>>,
  TError,
  { data: AddorUpdateCartItemDto },
  TContext
> => {
  const mutationKey = ["putApiCartUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiCartUpdate>>,
    { data: AddorUpdateCartItemDto }
  > = (props) => {
    const { data } = props ?? {};

    return putApiCartUpdate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiCartUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiCartUpdate>>
>;
export type PutApiCartUpdateMutationBody = AddorUpdateCartItemDto;
export type PutApiCartUpdateMutationError = unknown;

export const usePutApiCartUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiCartUpdate>>,
      TError,
      { data: AddorUpdateCartItemDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiCartUpdate>>,
  TError,
  { data: AddorUpdateCartItemDto },
  TContext
> => {
  const mutationOptions = getPutApiCartUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteApiCartRemoveGameId = (gameId: string) => {
  return axiosInstance<void>({
    url: `/api/Cart/remove/${gameId}`,
    method: "DELETE",
  });
};

export const getDeleteApiCartRemoveGameIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCartRemoveGameId>>,
    TError,
    { gameId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiCartRemoveGameId>>,
  TError,
  { gameId: string },
  TContext
> => {
  const mutationKey = ["deleteApiCartRemoveGameId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiCartRemoveGameId>>,
    { gameId: string }
  > = (props) => {
    const { gameId } = props ?? {};

    return deleteApiCartRemoveGameId(gameId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiCartRemoveGameIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiCartRemoveGameId>>
>;

export type DeleteApiCartRemoveGameIdMutationError = unknown;

export const useDeleteApiCartRemoveGameId = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiCartRemoveGameId>>,
      TError,
      { gameId: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiCartRemoveGameId>>,
  TError,
  { gameId: string },
  TContext
> => {
  const mutationOptions = getDeleteApiCartRemoveGameIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const postApiCartSubmit = (signal?: AbortSignal) => {
  return axiosInstance<void>({
    url: `/api/Cart/submit`,
    method: "POST",
    signal,
  });
};

export const getPostApiCartSubmitMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCartSubmit>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCartSubmit>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postApiCartSubmit"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCartSubmit>>,
    void
  > = () => {
    return postApiCartSubmit();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCartSubmitMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCartSubmit>>
>;

export type PostApiCartSubmitMutationError = unknown;

export const usePostApiCartSubmit = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiCartSubmit>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiCartSubmit>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiCartSubmitMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiCompanies = (signal?: AbortSignal) => {
  return axiosInstance<CompanyViewModel[]>({
    url: `/api/Companies`,
    method: "GET",
    signal,
  });
};

export const getGetApiCompaniesQueryKey = () => {
  return [`/api/Companies`] as const;
};

export const getGetApiCompaniesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCompanies>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiCompanies>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCompaniesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCompanies>>> = ({
    signal,
  }) => getApiCompanies(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCompanies>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiCompaniesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCompanies>>
>;
export type GetApiCompaniesQueryError = unknown;

export function useGetApiCompanies<
  TData = Awaited<ReturnType<typeof getApiCompanies>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiCompanies>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCompanies>>,
          TError,
          Awaited<ReturnType<typeof getApiCompanies>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiCompanies<
  TData = Awaited<ReturnType<typeof getApiCompanies>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiCompanies>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCompanies>>,
          TError,
          Awaited<ReturnType<typeof getApiCompanies>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiCompanies<
  TData = Awaited<ReturnType<typeof getApiCompanies>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiCompanies>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiCompanies<
  TData = Awaited<ReturnType<typeof getApiCompanies>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiCompanies>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiCompaniesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiCompanies = (
  addOrUpdateCompanyDTO: AddOrUpdateCompanyDTO,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Companies`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addOrUpdateCompanyDTO,
    signal,
  });
};

export const getPostApiCompaniesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCompanies>>,
    TError,
    { data: AddOrUpdateCompanyDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCompanies>>,
  TError,
  { data: AddOrUpdateCompanyDTO },
  TContext
> => {
  const mutationKey = ["postApiCompanies"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCompanies>>,
    { data: AddOrUpdateCompanyDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postApiCompanies(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCompaniesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCompanies>>
>;
export type PostApiCompaniesMutationBody = AddOrUpdateCompanyDTO;
export type PostApiCompaniesMutationError = unknown;

export const usePostApiCompanies = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiCompanies>>,
      TError,
      { data: AddOrUpdateCompanyDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiCompanies>>,
  TError,
  { data: AddOrUpdateCompanyDTO },
  TContext
> => {
  const mutationOptions = getPostApiCompaniesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const putApiCompanies = (
  addOrUpdateCompanyDTO: AddOrUpdateCompanyDTO,
) => {
  return axiosInstance<void>({
    url: `/api/Companies`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: addOrUpdateCompanyDTO,
  });
};

export const getPutApiCompaniesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCompanies>>,
    TError,
    { data: AddOrUpdateCompanyDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiCompanies>>,
  TError,
  { data: AddOrUpdateCompanyDTO },
  TContext
> => {
  const mutationKey = ["putApiCompanies"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiCompanies>>,
    { data: AddOrUpdateCompanyDTO }
  > = (props) => {
    const { data } = props ?? {};

    return putApiCompanies(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiCompaniesMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiCompanies>>
>;
export type PutApiCompaniesMutationBody = AddOrUpdateCompanyDTO;
export type PutApiCompaniesMutationError = unknown;

export const usePutApiCompanies = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiCompanies>>,
      TError,
      { data: AddOrUpdateCompanyDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiCompanies>>,
  TError,
  { data: AddOrUpdateCompanyDTO },
  TContext
> => {
  const mutationOptions = getPutApiCompaniesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiCompaniesId = (id: string, signal?: AbortSignal) => {
  return axiosInstance<CompanyViewModel>({
    url: `/api/Companies/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiCompaniesIdQueryKey = (id: string) => {
  return [`/api/Companies/${id}`] as const;
};

export const getGetApiCompaniesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCompaniesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiCompaniesId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCompaniesIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiCompaniesId>>
  > = ({ signal }) => getApiCompaniesId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCompaniesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiCompaniesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCompaniesId>>
>;
export type GetApiCompaniesIdQueryError = unknown;

export function useGetApiCompaniesId<
  TData = Awaited<ReturnType<typeof getApiCompaniesId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiCompaniesId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCompaniesId>>,
          TError,
          Awaited<ReturnType<typeof getApiCompaniesId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiCompaniesId<
  TData = Awaited<ReturnType<typeof getApiCompaniesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiCompaniesId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCompaniesId>>,
          TError,
          Awaited<ReturnType<typeof getApiCompaniesId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiCompaniesId<
  TData = Awaited<ReturnType<typeof getApiCompaniesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiCompaniesId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiCompaniesId<
  TData = Awaited<ReturnType<typeof getApiCompaniesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiCompaniesId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiCompaniesIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiCompaniesId = (id: string) => {
  return axiosInstance<void>({ url: `/api/Companies/${id}`, method: "DELETE" });
};

export const getDeleteApiCompaniesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCompaniesId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiCompaniesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteApiCompaniesId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiCompaniesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiCompaniesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiCompaniesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiCompaniesId>>
>;

export type DeleteApiCompaniesIdMutationError = unknown;

export const useDeleteApiCompaniesId = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiCompaniesId>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiCompaniesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiCompaniesIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiGames = (
  params?: GetApiGamesParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Games`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiGamesQueryKey = (params?: GetApiGamesParams) => {
  return [`/api/Games`, ...(params ? [params] : [])] as const;
};

export const getGetApiGamesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGames>>,
  TError = unknown,
>(
  params?: GetApiGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGames>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiGamesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGames>>> = ({
    signal,
  }) => getApiGames(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGames>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGamesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiGames>>
>;
export type GetApiGamesQueryError = unknown;

export function useGetApiGames<
  TData = Awaited<ReturnType<typeof getApiGames>>,
  TError = unknown,
>(
  params: undefined | GetApiGamesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGames>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGames>>,
          TError,
          Awaited<ReturnType<typeof getApiGames>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGames<
  TData = Awaited<ReturnType<typeof getApiGames>>,
  TError = unknown,
>(
  params?: GetApiGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGames>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGames>>,
          TError,
          Awaited<ReturnType<typeof getApiGames>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGames<
  TData = Awaited<ReturnType<typeof getApiGames>>,
  TError = unknown,
>(
  params?: GetApiGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGames>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiGames<
  TData = Awaited<ReturnType<typeof getApiGames>>,
  TError = unknown,
>(
  params?: GetApiGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGames>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiGamesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiGames = (
  addOrUpdateGameDTO: AddOrUpdateGameDTO,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Games`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addOrUpdateGameDTO,
    signal,
  });
};

export const getPostApiGamesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiGames>>,
    TError,
    { data: AddOrUpdateGameDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiGames>>,
  TError,
  { data: AddOrUpdateGameDTO },
  TContext
> => {
  const mutationKey = ["postApiGames"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiGames>>,
    { data: AddOrUpdateGameDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postApiGames(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiGamesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiGames>>
>;
export type PostApiGamesMutationBody = AddOrUpdateGameDTO;
export type PostApiGamesMutationError = unknown;

export const usePostApiGames = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiGames>>,
      TError,
      { data: AddOrUpdateGameDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiGames>>,
  TError,
  { data: AddOrUpdateGameDTO },
  TContext
> => {
  const mutationOptions = getPostApiGamesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const putApiGames = (addOrUpdateGameDTO: AddOrUpdateGameDTO) => {
  return axiosInstance<void>({
    url: `/api/Games`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: addOrUpdateGameDTO,
  });
};

export const getPutApiGamesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiGames>>,
    TError,
    { data: AddOrUpdateGameDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiGames>>,
  TError,
  { data: AddOrUpdateGameDTO },
  TContext
> => {
  const mutationKey = ["putApiGames"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiGames>>,
    { data: AddOrUpdateGameDTO }
  > = (props) => {
    const { data } = props ?? {};

    return putApiGames(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiGamesMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiGames>>
>;
export type PutApiGamesMutationBody = AddOrUpdateGameDTO;
export type PutApiGamesMutationError = unknown;

export const usePutApiGames = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiGames>>,
      TError,
      { data: AddOrUpdateGameDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiGames>>,
  TError,
  { data: AddOrUpdateGameDTO },
  TContext
> => {
  const mutationOptions = getPutApiGamesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiGamesListbygenreGenreId = (
  genreId: string,
  signal?: AbortSignal,
) => {
  return axiosInstance<GameListViewModel[]>({
    url: `/api/Games/listbygenre/${genreId}`,
    method: "GET",
    signal,
  });
};

export const getGetApiGamesListbygenreGenreIdQueryKey = (genreId: string) => {
  return [`/api/Games/listbygenre/${genreId}`] as const;
};

export const getGetApiGamesListbygenreGenreIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
  TError = unknown,
>(
  genreId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiGamesListbygenreGenreIdQueryKey(genreId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>
  > = ({ signal }) => getApiGamesListbygenreGenreId(genreId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!genreId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGamesListbygenreGenreIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>
>;
export type GetApiGamesListbygenreGenreIdQueryError = unknown;

export function useGetApiGamesListbygenreGenreId<
  TData = Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
  TError = unknown,
>(
  genreId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
          TError,
          Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGamesListbygenreGenreId<
  TData = Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
  TError = unknown,
>(
  genreId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
          TError,
          Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGamesListbygenreGenreId<
  TData = Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
  TError = unknown,
>(
  genreId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiGamesListbygenreGenreId<
  TData = Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
  TError = unknown,
>(
  genreId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesListbygenreGenreId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiGamesListbygenreGenreIdQueryOptions(
    genreId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiGamesId = (id: string, signal?: AbortSignal) => {
  return axiosInstance<GameViewModel>({
    url: `/api/Games/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiGamesIdQueryKey = (id: string) => {
  return [`/api/Games/${id}`] as const;
};

export const getGetApiGamesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGamesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGamesId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiGamesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGamesId>>> = ({
    signal,
  }) => getApiGamesId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGamesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGamesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiGamesId>>
>;
export type GetApiGamesIdQueryError = unknown;

export function useGetApiGamesId<
  TData = Awaited<ReturnType<typeof getApiGamesId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGamesId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGamesId>>,
          TError,
          Awaited<ReturnType<typeof getApiGamesId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGamesId<
  TData = Awaited<ReturnType<typeof getApiGamesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGamesId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGamesId>>,
          TError,
          Awaited<ReturnType<typeof getApiGamesId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGamesId<
  TData = Awaited<ReturnType<typeof getApiGamesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGamesId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiGamesId<
  TData = Awaited<ReturnType<typeof getApiGamesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGamesId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiGamesIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiGamesId = (id: string) => {
  return axiosInstance<void>({ url: `/api/Games/${id}`, method: "DELETE" });
};

export const getDeleteApiGamesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiGamesId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiGamesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteApiGamesId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiGamesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiGamesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiGamesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiGamesId>>
>;

export type DeleteApiGamesIdMutationError = unknown;

export const useDeleteApiGamesId = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiGamesId>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiGamesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiGamesIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiGamesBestrated = (signal?: AbortSignal) => {
  return axiosInstance<GameListViewModel[]>({
    url: `/api/Games/bestrated`,
    method: "GET",
    signal,
  });
};

export const getGetApiGamesBestratedQueryKey = () => {
  return [`/api/Games/bestrated`] as const;
};

export const getGetApiGamesBestratedQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGamesBestrated>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiGamesBestrated>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiGamesBestratedQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiGamesBestrated>>
  > = ({ signal }) => getApiGamesBestrated(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGamesBestrated>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGamesBestratedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiGamesBestrated>>
>;
export type GetApiGamesBestratedQueryError = unknown;

export function useGetApiGamesBestrated<
  TData = Awaited<ReturnType<typeof getApiGamesBestrated>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesBestrated>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGamesBestrated>>,
          TError,
          Awaited<ReturnType<typeof getApiGamesBestrated>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGamesBestrated<
  TData = Awaited<ReturnType<typeof getApiGamesBestrated>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesBestrated>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGamesBestrated>>,
          TError,
          Awaited<ReturnType<typeof getApiGamesBestrated>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGamesBestrated<
  TData = Awaited<ReturnType<typeof getApiGamesBestrated>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesBestrated>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiGamesBestrated<
  TData = Awaited<ReturnType<typeof getApiGamesBestrated>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesBestrated>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiGamesBestratedQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiGamesBestsellers = (signal?: AbortSignal) => {
  return axiosInstance<GameListViewModel[]>({
    url: `/api/Games/bestsellers`,
    method: "GET",
    signal,
  });
};

export const getGetApiGamesBestsellersQueryKey = () => {
  return [`/api/Games/bestsellers`] as const;
};

export const getGetApiGamesBestsellersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGamesBestsellers>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiGamesBestsellers>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiGamesBestsellersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiGamesBestsellers>>
  > = ({ signal }) => getApiGamesBestsellers(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGamesBestsellers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGamesBestsellersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiGamesBestsellers>>
>;
export type GetApiGamesBestsellersQueryError = unknown;

export function useGetApiGamesBestsellers<
  TData = Awaited<ReturnType<typeof getApiGamesBestsellers>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesBestsellers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGamesBestsellers>>,
          TError,
          Awaited<ReturnType<typeof getApiGamesBestsellers>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGamesBestsellers<
  TData = Awaited<ReturnType<typeof getApiGamesBestsellers>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesBestsellers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGamesBestsellers>>,
          TError,
          Awaited<ReturnType<typeof getApiGamesBestsellers>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGamesBestsellers<
  TData = Awaited<ReturnType<typeof getApiGamesBestsellers>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesBestsellers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiGamesBestsellers<
  TData = Awaited<ReturnType<typeof getApiGamesBestsellers>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesBestsellers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiGamesBestsellersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiGamesIdUploadthumbimage = (
  id: string,
  putApiGamesIdUploadthumbimageBody: PutApiGamesIdUploadthumbimageBody,
) => {
  const formData = new FormData();
  formData.append(`file`, putApiGamesIdUploadthumbimageBody.file);

  return axiosInstance<string>({
    url: `/api/Games/${id}/uploadthumbimage`,
    method: "PUT",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getPutApiGamesIdUploadthumbimageMutationOptions = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiGamesIdUploadthumbimage>>,
    TError,
    { id: string; data: PutApiGamesIdUploadthumbimageBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiGamesIdUploadthumbimage>>,
  TError,
  { id: string; data: PutApiGamesIdUploadthumbimageBody },
  TContext
> => {
  const mutationKey = ["putApiGamesIdUploadthumbimage"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiGamesIdUploadthumbimage>>,
    { id: string; data: PutApiGamesIdUploadthumbimageBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiGamesIdUploadthumbimage(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiGamesIdUploadthumbimageMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiGamesIdUploadthumbimage>>
>;
export type PutApiGamesIdUploadthumbimageMutationBody =
  PutApiGamesIdUploadthumbimageBody;
export type PutApiGamesIdUploadthumbimageMutationError = string;

export const usePutApiGamesIdUploadthumbimage = <
  TError = string,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiGamesIdUploadthumbimage>>,
      TError,
      { id: string; data: PutApiGamesIdUploadthumbimageBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiGamesIdUploadthumbimage>>,
  TError,
  { id: string; data: PutApiGamesIdUploadthumbimageBody },
  TContext
> => {
  const mutationOptions =
    getPutApiGamesIdUploadthumbimageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const postApiGamesOverview = (
  addOrUpdateGameOverviewDTO: AddOrUpdateGameOverviewDTO,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Games/overview`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addOrUpdateGameOverviewDTO,
    signal,
  });
};

export const getPostApiGamesOverviewMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiGamesOverview>>,
    TError,
    { data: AddOrUpdateGameOverviewDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiGamesOverview>>,
  TError,
  { data: AddOrUpdateGameOverviewDTO },
  TContext
> => {
  const mutationKey = ["postApiGamesOverview"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiGamesOverview>>,
    { data: AddOrUpdateGameOverviewDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postApiGamesOverview(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiGamesOverviewMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiGamesOverview>>
>;
export type PostApiGamesOverviewMutationBody = AddOrUpdateGameOverviewDTO;
export type PostApiGamesOverviewMutationError = unknown;

export const usePostApiGamesOverview = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiGamesOverview>>,
      TError,
      { data: AddOrUpdateGameOverviewDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiGamesOverview>>,
  TError,
  { data: AddOrUpdateGameOverviewDTO },
  TContext
> => {
  const mutationOptions = getPostApiGamesOverviewMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiGamesIdOverview = (id: string, signal?: AbortSignal) => {
  return axiosInstance<void>({
    url: `/api/Games/${id}/overview`,
    method: "GET",
    signal,
  });
};

export const getGetApiGamesIdOverviewQueryKey = (id: string) => {
  return [`/api/Games/${id}/overview`] as const;
};

export const getGetApiGamesIdOverviewQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGamesIdOverview>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesIdOverview>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiGamesIdOverviewQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiGamesIdOverview>>
  > = ({ signal }) => getApiGamesIdOverview(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGamesIdOverview>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGamesIdOverviewQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiGamesIdOverview>>
>;
export type GetApiGamesIdOverviewQueryError = unknown;

export function useGetApiGamesIdOverview<
  TData = Awaited<ReturnType<typeof getApiGamesIdOverview>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesIdOverview>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGamesIdOverview>>,
          TError,
          Awaited<ReturnType<typeof getApiGamesIdOverview>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGamesIdOverview<
  TData = Awaited<ReturnType<typeof getApiGamesIdOverview>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesIdOverview>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGamesIdOverview>>,
          TError,
          Awaited<ReturnType<typeof getApiGamesIdOverview>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGamesIdOverview<
  TData = Awaited<ReturnType<typeof getApiGamesIdOverview>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesIdOverview>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiGamesIdOverview<
  TData = Awaited<ReturnType<typeof getApiGamesIdOverview>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiGamesIdOverview>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiGamesIdOverviewQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiGenres = (signal?: AbortSignal) => {
  return axiosInstance<GenreViewModel[]>({
    url: `/api/Genres`,
    method: "GET",
    signal,
  });
};

export const getGetApiGenresQueryKey = () => {
  return [`/api/Genres`] as const;
};

export const getGetApiGenresQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGenres>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiGenres>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiGenresQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGenres>>> = ({
    signal,
  }) => getApiGenres(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGenres>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGenresQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiGenres>>
>;
export type GetApiGenresQueryError = unknown;

export function useGetApiGenres<
  TData = Awaited<ReturnType<typeof getApiGenres>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGenres>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGenres>>,
          TError,
          Awaited<ReturnType<typeof getApiGenres>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGenres<
  TData = Awaited<ReturnType<typeof getApiGenres>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGenres>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGenres>>,
          TError,
          Awaited<ReturnType<typeof getApiGenres>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGenres<
  TData = Awaited<ReturnType<typeof getApiGenres>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGenres>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiGenres<
  TData = Awaited<ReturnType<typeof getApiGenres>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGenres>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiGenresQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiGenres = (
  addOrUpdateGenreDTO: AddOrUpdateGenreDTO,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Genres`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addOrUpdateGenreDTO,
    signal,
  });
};

export const getPostApiGenresMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiGenres>>,
    TError,
    { data: AddOrUpdateGenreDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiGenres>>,
  TError,
  { data: AddOrUpdateGenreDTO },
  TContext
> => {
  const mutationKey = ["postApiGenres"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiGenres>>,
    { data: AddOrUpdateGenreDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postApiGenres(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiGenresMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiGenres>>
>;
export type PostApiGenresMutationBody = AddOrUpdateGenreDTO;
export type PostApiGenresMutationError = unknown;

export const usePostApiGenres = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiGenres>>,
      TError,
      { data: AddOrUpdateGenreDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiGenres>>,
  TError,
  { data: AddOrUpdateGenreDTO },
  TContext
> => {
  const mutationOptions = getPostApiGenresMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const putApiGenres = (addOrUpdateGenreDTO: AddOrUpdateGenreDTO) => {
  return axiosInstance<void>({
    url: `/api/Genres`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: addOrUpdateGenreDTO,
  });
};

export const getPutApiGenresMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiGenres>>,
    TError,
    { data: AddOrUpdateGenreDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiGenres>>,
  TError,
  { data: AddOrUpdateGenreDTO },
  TContext
> => {
  const mutationKey = ["putApiGenres"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiGenres>>,
    { data: AddOrUpdateGenreDTO }
  > = (props) => {
    const { data } = props ?? {};

    return putApiGenres(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiGenresMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiGenres>>
>;
export type PutApiGenresMutationBody = AddOrUpdateGenreDTO;
export type PutApiGenresMutationError = unknown;

export const usePutApiGenres = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiGenres>>,
      TError,
      { data: AddOrUpdateGenreDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiGenres>>,
  TError,
  { data: AddOrUpdateGenreDTO },
  TContext
> => {
  const mutationOptions = getPutApiGenresMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiGenresId = (id: string, signal?: AbortSignal) => {
  return axiosInstance<GenreViewModel>({
    url: `/api/Genres/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiGenresIdQueryKey = (id: string) => {
  return [`/api/Genres/${id}`] as const;
};

export const getGetApiGenresIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGenresId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGenresId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiGenresIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGenresId>>> = ({
    signal,
  }) => getApiGenresId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGenresId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGenresIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiGenresId>>
>;
export type GetApiGenresIdQueryError = unknown;

export function useGetApiGenresId<
  TData = Awaited<ReturnType<typeof getApiGenresId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGenresId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGenresId>>,
          TError,
          Awaited<ReturnType<typeof getApiGenresId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGenresId<
  TData = Awaited<ReturnType<typeof getApiGenresId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGenresId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGenresId>>,
          TError,
          Awaited<ReturnType<typeof getApiGenresId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGenresId<
  TData = Awaited<ReturnType<typeof getApiGenresId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGenresId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiGenresId<
  TData = Awaited<ReturnType<typeof getApiGenresId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiGenresId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiGenresIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiGenresId = (id: string) => {
  return axiosInstance<void>({ url: `/api/Genres/${id}`, method: "DELETE" });
};

export const getDeleteApiGenresIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiGenresId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiGenresId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteApiGenresId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiGenresId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiGenresId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiGenresIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiGenresId>>
>;

export type DeleteApiGenresIdMutationError = unknown;

export const useDeleteApiGenresId = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiGenresId>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiGenresId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiGenresIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const postApiImagesConverttobase64 = (signal?: AbortSignal) => {
  return axiosInstance<void>({
    url: `/api/Images/converttobase64`,
    method: "POST",
    signal,
  });
};

export const getPostApiImagesConverttobase64MutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiImagesConverttobase64>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiImagesConverttobase64>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postApiImagesConverttobase64"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiImagesConverttobase64>>,
    void
  > = () => {
    return postApiImagesConverttobase64();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiImagesConverttobase64MutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiImagesConverttobase64>>
>;

export type PostApiImagesConverttobase64MutationError = unknown;

export const usePostApiImagesConverttobase64 = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiImagesConverttobase64>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiImagesConverttobase64>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiImagesConverttobase64MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiOrders = (
  params?: GetApiOrdersParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Orders`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiOrdersQueryKey = (params?: GetApiOrdersParams) => {
  return [`/api/Orders`, ...(params ? [params] : [])] as const;
};

export const getGetApiOrdersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOrders>>,
  TError = unknown,
>(
  params?: GetApiOrdersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOrdersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrders>>> = ({
    signal,
  }) => getApiOrders(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOrders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrders>>
>;
export type GetApiOrdersQueryError = unknown;

export function useGetApiOrders<
  TData = Awaited<ReturnType<typeof getApiOrders>>,
  TError = unknown,
>(
  params: undefined | GetApiOrdersParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrders>>,
          TError,
          Awaited<ReturnType<typeof getApiOrders>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrders<
  TData = Awaited<ReturnType<typeof getApiOrders>>,
  TError = unknown,
>(
  params?: GetApiOrdersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrders>>,
          TError,
          Awaited<ReturnType<typeof getApiOrders>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrders<
  TData = Awaited<ReturnType<typeof getApiOrders>>,
  TError = unknown,
>(
  params?: GetApiOrdersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiOrders<
  TData = Awaited<ReturnType<typeof getApiOrders>>,
  TError = unknown,
>(
  params?: GetApiOrdersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrders>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrdersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiOrders = (
  createOrderDto: CreateOrderDto,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Orders`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createOrderDto,
    signal,
  });
};

export const getPostApiOrdersMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOrders>>,
    TError,
    { data: CreateOrderDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiOrders>>,
  TError,
  { data: CreateOrderDto },
  TContext
> => {
  const mutationKey = ["postApiOrders"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOrders>>,
    { data: CreateOrderDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiOrders(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiOrdersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiOrders>>
>;
export type PostApiOrdersMutationBody = CreateOrderDto;
export type PostApiOrdersMutationError = unknown;

export const usePostApiOrders = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiOrders>>,
      TError,
      { data: CreateOrderDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiOrders>>,
  TError,
  { data: CreateOrderDto },
  TContext
> => {
  const mutationOptions = getPostApiOrdersMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiOrdersMy = (
  params?: GetApiOrdersMyParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Orders/my`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiOrdersMyQueryKey = (params?: GetApiOrdersMyParams) => {
  return [`/api/Orders/my`, ...(params ? [params] : [])] as const;
};

export const getGetApiOrdersMyQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOrdersMy>>,
  TError = unknown,
>(
  params?: GetApiOrdersMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMy>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOrdersMyQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrdersMy>>> = ({
    signal,
  }) => getApiOrdersMy(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOrdersMy>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrdersMyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrdersMy>>
>;
export type GetApiOrdersMyQueryError = unknown;

export function useGetApiOrdersMy<
  TData = Awaited<ReturnType<typeof getApiOrdersMy>>,
  TError = unknown,
>(
  params: undefined | GetApiOrdersMyParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMy>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrdersMy>>,
          TError,
          Awaited<ReturnType<typeof getApiOrdersMy>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrdersMy<
  TData = Awaited<ReturnType<typeof getApiOrdersMy>>,
  TError = unknown,
>(
  params?: GetApiOrdersMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMy>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrdersMy>>,
          TError,
          Awaited<ReturnType<typeof getApiOrdersMy>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrdersMy<
  TData = Awaited<ReturnType<typeof getApiOrdersMy>>,
  TError = unknown,
>(
  params?: GetApiOrdersMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMy>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiOrdersMy<
  TData = Awaited<ReturnType<typeof getApiOrdersMy>>,
  TError = unknown,
>(
  params?: GetApiOrdersMyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersMy>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrdersMyQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiOrdersId = (id: string, signal?: AbortSignal) => {
  return axiosInstance<void>({
    url: `/api/Orders/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiOrdersIdQueryKey = (id: string) => {
  return [`/api/Orders/${id}`] as const;
};

export const getGetApiOrdersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOrdersId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOrdersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrdersId>>> = ({
    signal,
  }) => getApiOrdersId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOrdersId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrdersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrdersId>>
>;
export type GetApiOrdersIdQueryError = unknown;

export function useGetApiOrdersId<
  TData = Awaited<ReturnType<typeof getApiOrdersId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrdersId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrdersId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrdersId<
  TData = Awaited<ReturnType<typeof getApiOrdersId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrdersId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrdersId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrdersId<
  TData = Awaited<ReturnType<typeof getApiOrdersId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiOrdersId<
  TData = Awaited<ReturnType<typeof getApiOrdersId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrdersIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiOrdersId = (id: string, updateOrderDto: UpdateOrderDto) => {
  return axiosInstance<void>({
    url: `/api/Orders/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateOrderDto,
  });
};

export const getPutApiOrdersIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOrdersId>>,
    TError,
    { id: string; data: UpdateOrderDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiOrdersId>>,
  TError,
  { id: string; data: UpdateOrderDto },
  TContext
> => {
  const mutationKey = ["putApiOrdersId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOrdersId>>,
    { id: string; data: UpdateOrderDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiOrdersId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOrdersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiOrdersId>>
>;
export type PutApiOrdersIdMutationBody = UpdateOrderDto;
export type PutApiOrdersIdMutationError = unknown;

export const usePutApiOrdersId = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiOrdersId>>,
      TError,
      { id: string; data: UpdateOrderDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiOrdersId>>,
  TError,
  { id: string; data: UpdateOrderDto },
  TContext
> => {
  const mutationOptions = getPutApiOrdersIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteApiOrdersId = (id: string) => {
  return axiosInstance<void>({ url: `/api/Orders/${id}`, method: "DELETE" });
};

export const getDeleteApiOrdersIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiOrdersId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiOrdersId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteApiOrdersId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiOrdersId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiOrdersId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiOrdersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiOrdersId>>
>;

export type DeleteApiOrdersIdMutationError = unknown;

export const useDeleteApiOrdersId = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiOrdersId>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiOrdersId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiOrdersIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const postApiOrdersIdFinishPaypal = (
  id: string,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Orders/${id}/finish/paypal`,
    method: "POST",
    signal,
  });
};

export const getPostApiOrdersIdFinishPaypalMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOrdersIdFinishPaypal>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiOrdersIdFinishPaypal>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["postApiOrdersIdFinishPaypal"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOrdersIdFinishPaypal>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return postApiOrdersIdFinishPaypal(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiOrdersIdFinishPaypalMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiOrdersIdFinishPaypal>>
>;

export type PostApiOrdersIdFinishPaypalMutationError = unknown;

export const usePostApiOrdersIdFinishPaypal = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiOrdersIdFinishPaypal>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiOrdersIdFinishPaypal>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getPostApiOrdersIdFinishPaypalMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const postApiOrdersIdFinishCredit = (
  id: string,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Orders/${id}/finish/credit`,
    method: "POST",
    signal,
  });
};

export const getPostApiOrdersIdFinishCreditMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOrdersIdFinishCredit>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiOrdersIdFinishCredit>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["postApiOrdersIdFinishCredit"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOrdersIdFinishCredit>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return postApiOrdersIdFinishCredit(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiOrdersIdFinishCreditMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiOrdersIdFinishCredit>>
>;

export type PostApiOrdersIdFinishCreditMutationError = unknown;

export const usePostApiOrdersIdFinishCredit = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiOrdersIdFinishCredit>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiOrdersIdFinishCredit>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getPostApiOrdersIdFinishCreditMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiPlatforms = (signal?: AbortSignal) => {
  return axiosInstance<PlatformViewModel[]>({
    url: `/api/Platforms`,
    method: "GET",
    signal,
  });
};

export const getGetApiPlatformsQueryKey = () => {
  return [`/api/Platforms`] as const;
};

export const getGetApiPlatformsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPlatforms>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiPlatforms>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPlatformsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPlatforms>>> = ({
    signal,
  }) => getApiPlatforms(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPlatforms>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiPlatformsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPlatforms>>
>;
export type GetApiPlatformsQueryError = unknown;

export function useGetApiPlatforms<
  TData = Awaited<ReturnType<typeof getApiPlatforms>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlatforms>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPlatforms>>,
          TError,
          Awaited<ReturnType<typeof getApiPlatforms>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPlatforms<
  TData = Awaited<ReturnType<typeof getApiPlatforms>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlatforms>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPlatforms>>,
          TError,
          Awaited<ReturnType<typeof getApiPlatforms>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPlatforms<
  TData = Awaited<ReturnType<typeof getApiPlatforms>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlatforms>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiPlatforms<
  TData = Awaited<ReturnType<typeof getApiPlatforms>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlatforms>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiPlatformsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiPlatforms = (
  addOrUpdatePlatformDTO: AddOrUpdatePlatformDTO,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Platforms`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addOrUpdatePlatformDTO,
    signal,
  });
};

export const getPostApiPlatformsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPlatforms>>,
    TError,
    { data: AddOrUpdatePlatformDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPlatforms>>,
  TError,
  { data: AddOrUpdatePlatformDTO },
  TContext
> => {
  const mutationKey = ["postApiPlatforms"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPlatforms>>,
    { data: AddOrUpdatePlatformDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPlatforms(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPlatformsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPlatforms>>
>;
export type PostApiPlatformsMutationBody = AddOrUpdatePlatformDTO;
export type PostApiPlatformsMutationError = unknown;

export const usePostApiPlatforms = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiPlatforms>>,
      TError,
      { data: AddOrUpdatePlatformDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiPlatforms>>,
  TError,
  { data: AddOrUpdatePlatformDTO },
  TContext
> => {
  const mutationOptions = getPostApiPlatformsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const putApiPlatforms = (
  addOrUpdatePlatformDTO: AddOrUpdatePlatformDTO,
) => {
  return axiosInstance<void>({
    url: `/api/Platforms`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: addOrUpdatePlatformDTO,
  });
};

export const getPutApiPlatformsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPlatforms>>,
    TError,
    { data: AddOrUpdatePlatformDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiPlatforms>>,
  TError,
  { data: AddOrUpdatePlatformDTO },
  TContext
> => {
  const mutationKey = ["putApiPlatforms"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiPlatforms>>,
    { data: AddOrUpdatePlatformDTO }
  > = (props) => {
    const { data } = props ?? {};

    return putApiPlatforms(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiPlatformsMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiPlatforms>>
>;
export type PutApiPlatformsMutationBody = AddOrUpdatePlatformDTO;
export type PutApiPlatformsMutationError = unknown;

export const usePutApiPlatforms = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiPlatforms>>,
      TError,
      { data: AddOrUpdatePlatformDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiPlatforms>>,
  TError,
  { data: AddOrUpdatePlatformDTO },
  TContext
> => {
  const mutationOptions = getPutApiPlatformsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiPlatformsId = (id: string, signal?: AbortSignal) => {
  return axiosInstance<PlatformViewModel>({
    url: `/api/Platforms/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiPlatformsIdQueryKey = (id: string) => {
  return [`/api/Platforms/${id}`] as const;
};

export const getGetApiPlatformsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPlatformsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlatformsId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPlatformsIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiPlatformsId>>
  > = ({ signal }) => getApiPlatformsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPlatformsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiPlatformsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPlatformsId>>
>;
export type GetApiPlatformsIdQueryError = unknown;

export function useGetApiPlatformsId<
  TData = Awaited<ReturnType<typeof getApiPlatformsId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlatformsId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPlatformsId>>,
          TError,
          Awaited<ReturnType<typeof getApiPlatformsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPlatformsId<
  TData = Awaited<ReturnType<typeof getApiPlatformsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlatformsId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPlatformsId>>,
          TError,
          Awaited<ReturnType<typeof getApiPlatformsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPlatformsId<
  TData = Awaited<ReturnType<typeof getApiPlatformsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlatformsId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiPlatformsId<
  TData = Awaited<ReturnType<typeof getApiPlatformsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlatformsId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiPlatformsIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiPlatformsId = (id: string) => {
  return axiosInstance<void>({ url: `/api/Platforms/${id}`, method: "DELETE" });
};

export const getDeleteApiPlatformsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiPlatformsId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiPlatformsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteApiPlatformsId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiPlatformsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiPlatformsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiPlatformsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiPlatformsId>>
>;

export type DeleteApiPlatformsIdMutationError = unknown;

export const useDeleteApiPlatformsId = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiPlatformsId>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiPlatformsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiPlatformsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiReviewsProductId = (id: string, signal?: AbortSignal) => {
  return axiosInstance<ReviewListViewModel[]>({
    url: `/api/Reviews/product/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiReviewsProductIdQueryKey = (id: string) => {
  return [`/api/Reviews/product/${id}`] as const;
};

export const getGetApiReviewsProductIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReviewsProductId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiReviewsProductId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiReviewsProductIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiReviewsProductId>>
  > = ({ signal }) => getApiReviewsProductId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReviewsProductId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiReviewsProductIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReviewsProductId>>
>;
export type GetApiReviewsProductIdQueryError = unknown;

export function useGetApiReviewsProductId<
  TData = Awaited<ReturnType<typeof getApiReviewsProductId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiReviewsProductId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewsProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiReviewsProductId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiReviewsProductId<
  TData = Awaited<ReturnType<typeof getApiReviewsProductId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiReviewsProductId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewsProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiReviewsProductId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiReviewsProductId<
  TData = Awaited<ReturnType<typeof getApiReviewsProductId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiReviewsProductId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiReviewsProductId<
  TData = Awaited<ReturnType<typeof getApiReviewsProductId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiReviewsProductId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiReviewsProductIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiReviewsUserId = (id: string, signal?: AbortSignal) => {
  return axiosInstance<ReviewListViewModel[]>({
    url: `/api/Reviews/user/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiReviewsUserIdQueryKey = (id: string) => {
  return [`/api/Reviews/user/${id}`] as const;
};

export const getGetApiReviewsUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReviewsUserId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiReviewsUserId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReviewsUserIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiReviewsUserId>>
  > = ({ signal }) => getApiReviewsUserId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReviewsUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiReviewsUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReviewsUserId>>
>;
export type GetApiReviewsUserIdQueryError = unknown;

export function useGetApiReviewsUserId<
  TData = Awaited<ReturnType<typeof getApiReviewsUserId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiReviewsUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewsUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiReviewsUserId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiReviewsUserId<
  TData = Awaited<ReturnType<typeof getApiReviewsUserId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiReviewsUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewsUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiReviewsUserId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiReviewsUserId<
  TData = Awaited<ReturnType<typeof getApiReviewsUserId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiReviewsUserId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiReviewsUserId<
  TData = Awaited<ReturnType<typeof getApiReviewsUserId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiReviewsUserId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiReviewsUserIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiReviews = (
  addOrUpdateReviewDTO: AddOrUpdateReviewDTO,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/Reviews`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addOrUpdateReviewDTO,
    signal,
  });
};

export const getPostApiReviewsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiReviews>>,
    TError,
    { data: AddOrUpdateReviewDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiReviews>>,
  TError,
  { data: AddOrUpdateReviewDTO },
  TContext
> => {
  const mutationKey = ["postApiReviews"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiReviews>>,
    { data: AddOrUpdateReviewDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postApiReviews(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiReviewsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiReviews>>
>;
export type PostApiReviewsMutationBody = AddOrUpdateReviewDTO;
export type PostApiReviewsMutationError = unknown;

export const usePostApiReviews = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiReviews>>,
      TError,
      { data: AddOrUpdateReviewDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiReviews>>,
  TError,
  { data: AddOrUpdateReviewDTO },
  TContext
> => {
  const mutationOptions = getPostApiReviewsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getClaims = (signal?: AbortSignal) => {
  return axiosInstance<void>({ url: `/claims`, method: "GET", signal });
};

export const getGetClaimsQueryKey = () => {
  return [`/claims`] as const;
};

export const getGetClaimsQueryOptions = <
  TData = Awaited<ReturnType<typeof getClaims>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getClaims>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetClaimsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getClaims>>> = ({
    signal,
  }) => getClaims(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getClaims>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetClaimsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClaims>>
>;
export type GetClaimsQueryError = unknown;

export function useGetClaims<
  TData = Awaited<ReturnType<typeof getClaims>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClaims>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClaims>>,
          TError,
          Awaited<ReturnType<typeof getClaims>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetClaims<
  TData = Awaited<ReturnType<typeof getClaims>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClaims>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClaims>>,
          TError,
          Awaited<ReturnType<typeof getClaims>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetClaims<
  TData = Awaited<ReturnType<typeof getClaims>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClaims>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetClaims<
  TData = Awaited<ReturnType<typeof getClaims>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClaims>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetClaimsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
